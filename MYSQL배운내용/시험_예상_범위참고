/*
	- 데이터베이스 : 데이터(data) + 베이스(base)
    - DBMS : Database Management System 의 약자, 데이터베이스 관리 시스템
    
    
    데이터 베이스 사용할때 중요 ***(CRUD : Create(추가) Read(보기) Updare(수정) Delete(삭제))***
    -관계형(Relational) 데이터 베이스  
    1. 가장 대표적인 데이터베이스 시스템
    2. 데이터를 테이블 형태로 저장하고 여러 테이블을 조합하여 비즈니스 관계를 도출하는 구조
    3. 데이터의 중복을 최소화할 수 있으며 사용하기 편리하고 데이터의 무결성, 트랜잭션 처리 등
		데이터베이스 관리 시스템으로 뛰어난 성능을 보여준다.
        
	-SQL(Structured Query Language)
    : 관계형 데이터베이스에서 데이터를 조회하거나 조작하기 위해 사용하는 표준 검색 언어
    
    - SQL 종류
	1. DML(Data Manipulation Language) : 데이터 조작어 ****
		- 실제 데이터를 조작하기 위해 사용하는 언어 
        (INSERT : 추가, UPDATE : 수정, DELETE : 삭제, SELECT*******(//포함 할 수도 있고 안 할수도 있고))
	2. DQL(Data Query Language) : 데이터 질의어 ****
		- 데이터를 조회(검색)하기 위해 사용하는 언어 (SELECT******* : 조회)
	3. DCL(Data Control Language) : 데이터 제어어
		- DBMS에 대한 보안, 무결성, 복구 등 DBMS를 제어하기 위한 언어
        (GRANT : 권한 부여, REVOKE : 권환 회수)alter
	4. DDL(Data Definition Language) : 데이터 정의어
		- DBMS의 구조를 정의하거나 변경, 삭제하기 위해 사용하는 언어
        (CREATE : 생성, ALTER : 수정, DROP : 삭제) - 테이블 변경과 관련
	5. TCL(Transaction Control Language) : 트랜잭션을 제어하는 언어
		(COMMIT : 실행, ROLLBACK : 취소)
*/

/*

	SELECT 컬럼, [컬럼, ...]
	FROM 테이블명;

	- 테이블에서 데이터를 조회할 때 사용하는 SQL문
	- SELECT를 통해서 조회된 결과를 RESULT SET 문이라고 한다. (즉, 죄회된 행들의 집합)
	- 조회하고자 하는 컬럼들은 반드시 FROM 절에 기수ㄹ한 테이블에 존재하는 컬럼이어야 한다.
    - 모든 컬럼을 조회할 경우 컬럼명 대신 * 기호 사용 

*/

-- employee 테이블에 전체 사원의 모든 컬럼(*) 정보 조회
-- SELECT 를 사용하면 꼭 FROM 사용
-- 관례상 대문자로 작성
-- 출력하고 싶은 코드에 마우스 좌 클릭으로 선택 후 Ctrl + Enter 

/*
	컬럼 산술 연산 
    - SELECT 절에 컬럼명 입력 부분에 산술연산자를 사용하여 결과를 조회할 수 있다.
*/

    /*
		컬럼 별칭
        컬럼 as 별칭 / 컬럼 as "별칭" / 컬럼 별칭 / 컬럼 "별칭"
        
        - 산술연산을 하면 컬럼명이 지저분해진다.
		  이때 컬럼명에 별칭을 부여해서 깔끔하게 보여줄 수 있다.
		- 별칭을 부여할 때 띄어쓰기 혹은 특수문자가 포함될 경우 반드시 큰따옴표("")로 감싸준다.
    */

/*
	리터럴
    - SELECT 절에 리터럴을 사용하면 테이블에 존재하는 데이터처럼 조회가 가능
*/

/*
		DISTINCT
        - 컬럼에 중복된 값들을 한번씩만 표시하고자 할 때 사용
        -- 유의사항! DISTINCT는 SELECT절에 딱 한번만 기술 가능
*/

 /*
		WHERE 절
        
        SELECT 컬럼, 컬럼, .....
        FROM 테이블명
        WHERE 조건식;
        
        - 조회하고자 하는 테이블로부터 특정 조건에 만족하는 데이터만 조회하고자 할 때 사용
        - 이때 WHERE 절에 조건식을 제시
        - 조건식에는 다양한 연산자 사용 가능
        
        비교 연산자
        >, <, >= , <= : 대소 비교 
        = : 같은지 비교 연산자
        !=, <> : 같지 않은지 비교 
*/

/*    
BETWEEN AND
- 조건식에서 사용되는 구문
- 몇 이상 몇 이하인 범위에 대한 조건을 제시할 때 사용되는 연산자

- 비교대상컬럼 BETWEEN 하한값 AND 상한값
*/

/*
	LIKE
    - 비교하고자 하는 컬럼값이 내가 제시한 특정 패턴에 만족될 경우 조회
    
    비교대상컬럼 LIKE '특정패턴'
    - 특정패턴에는 '%','_'를 와일드 카드로 사용
    
    '%' : 0글자 이상 
    비교대상컬럼 LIKE '문자%' => 비교대상컬럼값이 문자로 "시작"되는걸 조회
    비교대상컬럼 LIKE '%문자' => 비교대상컬럼값이 문자로 "끝"나는걸 조회
    비교대상컬럼 LIKE '%문자%' => 비교대상컬럼값이 문자가 "포함"되는걸 조회 (키워드 검색)
    
    '_' : 1글자
    비교대상컬럼 LIKE '_문자' => 비교대상컬럼값에 문자앞에 무조건 한글자가 올 경우 조회
    비교대상컬럼 LIKE '__문자' => 비교대상컬럼값에 문자앞에 무조건 두글자가 올 경우 조회
    비교대상컬럼 LIKE '_문자_' => 비교대상컬럼값에 문자 앞과 뒤에 무조건 한글자씩 올 경우 조회
*/

-- ESCAPE OPTTIN : 나만의 와일드 카드를 만들어서 사용!
    SELECT emp_id, emp_name, email
	FROM employee
    WHERE email LIKE '___$_%' ESCAPE'$';
    -- 위의 사원들 이외의 사원들 조회
    -- 논리부정연산자 : NOT 
    SELECT emp_id, emp_name, email
	FROM employee
   -- WHERE NOT email LIKE '___$_%' ESCAPE'$'; 또는 
   WHERE email NOT LIKE '___$_%' ESCAPE'$';
   -- 또는 '___\_%'
   
/*
	IS NULL / IS NOT NULL
    - 컬럼값에 NULL이 있을 경우 NULL 값 비교에 사용되는 연산자
*/
    
/*
	IN 
    - 비교대상컬럼값이 내가 제시한 목록 중에 일치하는 값이 있는지
    비교대상컬럼 IN ('값1','값2', ....) (검색필터)
*/


/*
	연산자 우선순위
    0. ()
    1. 산술연산자 : +, -, *, /, DIV, %, MOD
    2. 비교연산자 : =, !=, <>, <, <=, >, >=
    3. IS NULL / LIKE / IN
    4. BETWEEN AND
    5. NOT
    6. AND
    7. OR
*/

/*
	ORDER BY
    - SELECT문 가장 마지막 줄에 작성 뿐만 아니라 실행순서 또한 마지막에 실행
    
	실행순서 3	SELECT 컬럼, 컬럼, ...
	실행순서 1	FROM 테이블명
    실행순서 2	WHERE 조건식
    실행순서 4	ORDER BY 정렬하고자 하는 컬럼값 [ASC|DESC];
    
    -ASC : 오름차순 정렬 (생략시 기본값)
    -DESC : 내림차순 정렬
*/

/*
	LIMIT
    - ORDER BY 절 보다 뒤에 조건을 걸고 싶을 때 사용
    - 출력되는 행 수를 제한하는 MySQL 전용 비표준 구문
    - 데이터 양을 제한하고자 할 때 유용 (페이징 처리) 

    -- LIMIT 절은 두 개의 값이 있을 수 있음!
    -- 첫번째 값은 오프셋(offset, 0부터 시작) 시작 행을 지정
    -- 두번째 값은 반환할 최대 행 수를 지정
*/

/*
	함수 : 전달된 컬럼값을 읽어들여서 함수를 실행한 결과를 반환
    
    - 단일행 함수 : N개의 값을 읽어서 N개의 결과값 리턴 (매 행마다 함수 실행 결과 반환)
    - 그룹 함수 : N개의 값을 읽어서 1개의 결과값 리턴 (그룹별로 함수 실행 결과 반환)
    
    >> SELECT 절에 단일행 함수와 그룹 함수는 함께 사용하지 못함!
	   왜? 결과 행의 개수가 다르기 때문에!
       
	>> 함수를 사용할 수 있는 위치 : SELECT, WHERE, ORDER BY,GROUP BY, HAVING
*/

-- 단일행 함수

/*
	문자 처리 함수
    
    LENGTH() : 해당 문자열값의 BYTE 길이 수 반환
    - 한글 한 글자 -> 3BYTE
    - 영문자, 숫자, 특수문자 한글자 -> 1BYTE 
    CHAR_LENGTH : 해당 문자열값의 글자 수 반환
*/

/*
	INSTR(컬럼|'문자열', '찾으려는 문자열')
    - 특정 문자열에서 찾고자 하는 문자열의 위치 반환
    - 없으면 0 반환
*/

/*
	LPAD|RPAD(컬럼|'문자열', 최종적으로 반한할 문자의 길이, '덧붙이고자 하는 문자')
	- 문자열에 덧붙이고자 하는 문자를 왼쪽 또는 오른쪽에 덧붙여서 최종적으로 반환할 문자의 길이만큼 문자열 반환 
*/

/*
	TEIM(컬럼|'문자열') | TRIM([LEADING|TRAILING|BOTH] 제거하고자하는문자들 FROM 컬럼|'문자열')
	- 문자열의 앞/뒤/양쪽에 있는 지정한 문자들을 제거한 나머지 문자열 반환
*/

